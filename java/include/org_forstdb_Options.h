/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_forstdb_Options */

#ifndef _Included_org_forstdb_Options
#define _Included_org_forstdb_Options
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_forstdb_Options
 * Method:    newOptions
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_newOptions__
  (JNIEnv *, jclass);

/*
 * Class:     org_forstdb_Options
 * Method:    newOptions
 * Signature: (JJ)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_newOptions__JJ
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    copyOptions
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_copyOptions
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    disposeInternal
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_disposeInternal
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEnv
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEnv
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    prepareForBulkLoad
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_prepareForBulkLoad
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setIncreaseParallelism
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setIncreaseParallelism
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    setCreateIfMissing
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCreateIfMissing
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    createIfMissing
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_createIfMissing
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCreateMissingColumnFamilies
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCreateMissingColumnFamilies
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    createMissingColumnFamilies
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_createMissingColumnFamilies
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setErrorIfExists
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setErrorIfExists
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    errorIfExists
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_errorIfExists
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setParanoidChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setParanoidChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    paranoidChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_paranoidChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setRateLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setRateLimiter
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setSstFileManager
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setSstFileManager
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLogger
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLogger
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setInfoLogLevel
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setInfoLogLevel
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    infoLogLevel
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_infoLogLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxOpenFiles
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxOpenFiles
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxOpenFiles
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxOpenFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxTotalWalSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxTotalWalSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxFileOpeningThreads
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxFileOpeningThreads
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxFileOpeningThreads
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxFileOpeningThreads
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxTotalWalSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxTotalWalSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setStatistics
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setStatistics
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    statistics
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_statistics
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    useFsync
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_useFsync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setUseFsync
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setUseFsync
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    setDbPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDbPaths
  (JNIEnv *, jobject, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_forstdb_Options
 * Method:    dbPathsLen
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_dbPathsLen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    dbPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_dbPaths
  (JNIEnv *, jobject, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_forstdb_Options
 * Method:    setDbLogDir
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDbLogDir
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_forstdb_Options
 * Method:    dbLogDir
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_forstdb_Options_dbLogDir
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWalDir
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWalDir
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_forstdb_Options
 * Method:    walDir
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_forstdb_Options_walDir
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setDeleteObsoleteFilesPeriodMicros
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDeleteObsoleteFilesPeriodMicros
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    deleteObsoleteFilesPeriodMicros
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_deleteObsoleteFilesPeriodMicros
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBackgroundCompactions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBackgroundCompactions
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBackgroundCompactions
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxBackgroundCompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxSubcompactions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxSubcompactions
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxSubcompactions
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxSubcompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBackgroundFlushes
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBackgroundFlushes
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBackgroundFlushes
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxBackgroundFlushes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBackgroundJobs
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBackgroundJobs
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBackgroundJobs
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxBackgroundJobs
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxLogFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxLogFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxLogFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxLogFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLogFileTimeToRoll
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLogFileTimeToRoll
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    logFileTimeToRoll
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_logFileTimeToRoll
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setKeepLogFileNum
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setKeepLogFileNum
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    keepLogFileNum
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_keepLogFileNum
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setRecycleLogFileNum
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setRecycleLogFileNum
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    recycleLogFileNum
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_recycleLogFileNum
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxManifestFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxManifestFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxManifestFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxManifestFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxTableFilesSizeFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxTableFilesSizeFIFO
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxTableFilesSizeFIFO
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxTableFilesSizeFIFO
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setTableCacheNumshardbits
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setTableCacheNumshardbits
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    tableCacheNumshardbits
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_tableCacheNumshardbits
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWalTtlSeconds
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWalTtlSeconds
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    walTtlSeconds
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_walTtlSeconds
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWalSizeLimitMB
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWalSizeLimitMB
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    walSizeLimitMB
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_walSizeLimitMB
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxWriteBatchGroupSizeBytes
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxWriteBatchGroupSizeBytes
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxWriteBatchGroupSizeBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxWriteBatchGroupSizeBytes
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setManifestPreallocationSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setManifestPreallocationSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    manifestPreallocationSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_manifestPreallocationSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setUseDirectReads
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setUseDirectReads
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    useDirectReads
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_useDirectReads
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setUseDirectIoForFlushAndCompaction
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setUseDirectIoForFlushAndCompaction
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    useDirectIoForFlushAndCompaction
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_useDirectIoForFlushAndCompaction
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAllowFAllocate
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAllowFAllocate
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    allowFAllocate
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_allowFAllocate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAllowMmapReads
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAllowMmapReads
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    allowMmapReads
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_allowMmapReads
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAllowMmapWrites
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAllowMmapWrites
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    allowMmapWrites
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_allowMmapWrites
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setIsFdCloseOnExec
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setIsFdCloseOnExec
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    isFdCloseOnExec
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_isFdCloseOnExec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setStatsDumpPeriodSec
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setStatsDumpPeriodSec
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    statsDumpPeriodSec
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_statsDumpPeriodSec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setStatsPersistPeriodSec
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setStatsPersistPeriodSec
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    statsPersistPeriodSec
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_statsPersistPeriodSec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setStatsHistoryBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setStatsHistoryBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    statsHistoryBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_statsHistoryBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAdviseRandomOnOpen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAdviseRandomOnOpen
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    adviseRandomOnOpen
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_adviseRandomOnOpen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setDbWriteBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDbWriteBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWriteBufferManager
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWriteBufferManager
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    dbWriteBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_dbWriteBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAccessHintOnCompactionStart
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAccessHintOnCompactionStart
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    accessHintOnCompactionStart
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_accessHintOnCompactionStart
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionReadaheadSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    compactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_compactionReadaheadSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setRandomAccessMaxBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setRandomAccessMaxBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    randomAccessMaxBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_randomAccessMaxBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWritableFileMaxBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWritableFileMaxBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    writableFileMaxBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_writableFileMaxBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setUseAdaptiveMutex
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setUseAdaptiveMutex
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    useAdaptiveMutex
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_useAdaptiveMutex
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBytesPerSync
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBytesPerSync
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    bytesPerSync
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_bytesPerSync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWalBytesPerSync
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWalBytesPerSync
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    walBytesPerSync
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_walBytesPerSync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setStrictBytesPerSync
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setStrictBytesPerSync
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    strictBytesPerSync
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_strictBytesPerSync
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEventListeners
 * Signature: (J[J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEventListeners
  (JNIEnv *, jclass, jlong, jlongArray);

/*
 * Class:     org_forstdb_Options
 * Method:    eventListeners
 * Signature: (J)[Lorg/forstdb/AbstractEventListener;
 */
JNIEXPORT jobjectArray JNICALL Java_org_forstdb_Options_eventListeners
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEnableThreadTracking
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEnableThreadTracking
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    enableThreadTracking
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_enableThreadTracking
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setDelayedWriteRate
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDelayedWriteRate
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    delayedWriteRate
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_delayedWriteRate
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEnablePipelinedWrite
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEnablePipelinedWrite
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    enablePipelinedWrite
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_enablePipelinedWrite
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setUnorderedWrite
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setUnorderedWrite
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    unorderedWrite
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_unorderedWrite
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAllowConcurrentMemtableWrite
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAllowConcurrentMemtableWrite
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    allowConcurrentMemtableWrite
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_allowConcurrentMemtableWrite
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEnableWriteThreadAdaptiveYield
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEnableWriteThreadAdaptiveYield
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    enableWriteThreadAdaptiveYield
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_enableWriteThreadAdaptiveYield
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWriteThreadMaxYieldUsec
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWriteThreadMaxYieldUsec
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    writeThreadMaxYieldUsec
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_writeThreadMaxYieldUsec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWriteThreadSlowYieldUsec
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWriteThreadSlowYieldUsec
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    writeThreadSlowYieldUsec
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_writeThreadSlowYieldUsec
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setSkipStatsUpdateOnDbOpen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setSkipStatsUpdateOnDbOpen
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    skipStatsUpdateOnDbOpen
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_skipStatsUpdateOnDbOpen
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setSkipCheckingSstFileSizesOnDbOpen
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setSkipCheckingSstFileSizesOnDbOpen
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    skipCheckingSstFileSizesOnDbOpen
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_skipCheckingSstFileSizesOnDbOpen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWalRecoveryMode
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWalRecoveryMode
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    walRecoveryMode
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_walRecoveryMode
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAllow2pc
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAllow2pc
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    allow2pc
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_allow2pc
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setRowCache
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setRowCache
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWalFilter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWalFilter
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setFailIfOptionsFileError
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setFailIfOptionsFileError
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    failIfOptionsFileError
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_failIfOptionsFileError
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setDumpMallocStats
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDumpMallocStats
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    dumpMallocStats
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_dumpMallocStats
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAvoidFlushDuringRecovery
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAvoidFlushDuringRecovery
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    avoidFlushDuringRecovery
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_avoidFlushDuringRecovery
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAvoidFlushDuringShutdown
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAvoidFlushDuringShutdown
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    avoidFlushDuringShutdown
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_avoidFlushDuringShutdown
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAllowIngestBehind
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAllowIngestBehind
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    allowIngestBehind
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_allowIngestBehind
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setTwoWriteQueues
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setTwoWriteQueues
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    twoWriteQueues
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_twoWriteQueues
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setManualWalFlush
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setManualWalFlush
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    manualWalFlush
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_manualWalFlush
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    oldDefaults
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_oldDefaults
  (JNIEnv *, jclass, jlong, jint, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    optimizeForSmallDb
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_optimizeForSmallDb__J
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    optimizeForSmallDb
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_optimizeForSmallDb__JJ
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    optimizeForPointLookup
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_optimizeForPointLookup
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    optimizeLevelStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_optimizeLevelStyleCompaction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    optimizeUniversalStyleCompaction
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_optimizeUniversalStyleCompaction
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setComparatorHandle
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setComparatorHandle__JI
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    setComparatorHandle
 * Signature: (JJB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setComparatorHandle__JJB
  (JNIEnv *, jobject, jlong, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    setMergeOperatorName
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMergeOperatorName
  (JNIEnv *, jobject, jlong, jstring);

/*
 * Class:     org_forstdb_Options
 * Method:    setMergeOperator
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMergeOperator
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionFilterHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionFilterHandle
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionFilterFactoryHandle
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionFilterFactoryHandle
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWriteBufferSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWriteBufferSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    writeBufferSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_writeBufferSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxWriteBufferNumber
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxWriteBufferNumber
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxWriteBufferNumber
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxWriteBufferNumber
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMinWriteBufferNumberToMerge
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMinWriteBufferNumberToMerge
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    minWriteBufferNumberToMerge
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_minWriteBufferNumberToMerge
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    compressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_compressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompressionPerLevel
 * Signature: (J[B)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompressionPerLevel
  (JNIEnv *, jobject, jlong, jbyteArray);

/*
 * Class:     org_forstdb_Options
 * Method:    compressionPerLevel
 * Signature: (J)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_forstdb_Options_compressionPerLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBottommostCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBottommostCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    bottommostCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_bottommostCompressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBottommostCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBottommostCompressionOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompressionOptions
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompressionOptions
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    useFixedLengthPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_useFixedLengthPrefixExtractor
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    useCappedPrefixExtractor
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_useCappedPrefixExtractor
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    setNumLevels
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setNumLevels
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    numLevels
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_numLevels
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevelZeroFileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevelZeroFileNumCompactionTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    levelZeroFileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_levelZeroFileNumCompactionTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevelZeroSlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevelZeroSlowdownWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    levelZeroSlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_levelZeroSlowdownWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevelZeroStopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevelZeroStopWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    levelZeroStopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_levelZeroStopWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setTargetFileSizeBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setTargetFileSizeBase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    targetFileSizeBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_targetFileSizeBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setTargetFileSizeMultiplier
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setTargetFileSizeMultiplier
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    targetFileSizeMultiplier
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_targetFileSizeMultiplier
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBytesForLevelBase
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBytesForLevelBase
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBytesForLevelBase
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxBytesForLevelBase
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevelCompactionDynamicLevelBytes
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevelCompactionDynamicLevelBytes
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    levelCompactionDynamicLevelBytes
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_levelCompactionDynamicLevelBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBytesForLevelMultiplier
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBytesForLevelMultiplier
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBytesForLevelMultiplier
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_forstdb_Options_maxBytesForLevelMultiplier
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxCompactionBytes
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxCompactionBytes
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxCompactionBytes
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxCompactionBytes
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setArenaBlockSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setArenaBlockSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    arenaBlockSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_arenaBlockSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setDisableAutoCompactions
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setDisableAutoCompactions
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    disableAutoCompactions
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_disableAutoCompactions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionStyle
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionStyle
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    compactionStyle
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_compactionStyle
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxSequentialSkipInIterations
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxSequentialSkipInIterations
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxSequentialSkipInIterations
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxSequentialSkipInIterations
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMemTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMemTableFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    memTableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_forstdb_Options_memTableFactoryName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setTableFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setTableFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    tableFactoryName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_org_forstdb_Options_tableFactoryName
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_forstdb_Options
 * Method:    cfPathsLen
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_cfPathsLen
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    cfPaths
 * Signature: (J[Ljava/lang/String;[J)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_cfPaths
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray);

/*
 * Class:     org_forstdb_Options
 * Method:    setInplaceUpdateSupport
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setInplaceUpdateSupport
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    inplaceUpdateSupport
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_inplaceUpdateSupport
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setInplaceUpdateNumLocks
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setInplaceUpdateNumLocks
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    inplaceUpdateNumLocks
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_inplaceUpdateNumLocks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMemtablePrefixBloomSizeRatio
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMemtablePrefixBloomSizeRatio
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_forstdb_Options
 * Method:    memtablePrefixBloomSizeRatio
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_forstdb_Options_memtablePrefixBloomSizeRatio
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setExperimentalMempurgeThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setExperimentalMempurgeThreshold
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_forstdb_Options
 * Method:    experimentalMempurgeThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_forstdb_Options_experimentalMempurgeThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMemtableWholeKeyFiltering
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMemtableWholeKeyFiltering
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    memtableWholeKeyFiltering
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_memtableWholeKeyFiltering
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBloomLocality
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBloomLocality
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    bloomLocality
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_bloomLocality
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxSuccessiveMerges
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxSuccessiveMerges
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    maxSuccessiveMerges
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_maxSuccessiveMerges
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setOptimizeFiltersForHits
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setOptimizeFiltersForHits
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    optimizeFiltersForHits
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_optimizeFiltersForHits
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMemtableHugePageSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMemtableHugePageSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    memtableHugePageSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_memtableHugePageSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setSoftPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setSoftPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    softPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_softPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setHardPendingCompactionBytesLimit
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setHardPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    hardPendingCompactionBytesLimit
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_hardPendingCompactionBytesLimit
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevel0FileNumCompactionTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevel0FileNumCompactionTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    level0FileNumCompactionTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_level0FileNumCompactionTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevel0SlowdownWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevel0SlowdownWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    level0SlowdownWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_level0SlowdownWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLevel0StopWritesTrigger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLevel0StopWritesTrigger
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    level0StopWritesTrigger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_level0StopWritesTrigger
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBytesForLevelMultiplierAdditional
 * Signature: (J[I)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBytesForLevelMultiplierAdditional
  (JNIEnv *, jobject, jlong, jintArray);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBytesForLevelMultiplierAdditional
 * Signature: (J)[I
 */
JNIEXPORT jintArray JNICALL Java_org_forstdb_Options_maxBytesForLevelMultiplierAdditional
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setParanoidFileChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setParanoidFileChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    paranoidFileChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_paranoidFileChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxWriteBufferNumberToMaintain
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxWriteBufferNumberToMaintain
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxWriteBufferNumberToMaintain
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxWriteBufferNumberToMaintain
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionPriority
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionPriority
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    compactionPriority
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_compactionPriority
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setReportBgIoStats
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setReportBgIoStats
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    reportBgIoStats
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_reportBgIoStats
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setTtl
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setTtl
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    ttl
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_ttl
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setPeriodicCompactionSeconds
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setPeriodicCompactionSeconds
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    periodicCompactionSeconds
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_periodicCompactionSeconds
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionOptionsUniversal
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionOptionsUniversal
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionOptionsFIFO
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionOptionsFIFO
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setForceConsistencyChecks
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setForceConsistencyChecks
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    forceConsistencyChecks
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_forceConsistencyChecks
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAtomicFlush
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAtomicFlush
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    atomicFlush
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_atomicFlush
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setSstPartitionerFactory
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setSstPartitionerFactory
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMemtableMaxRangeDeletions
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMemtableMaxRangeDeletions
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    memtableMaxRangeDeletions
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_memtableMaxRangeDeletions
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setCompactionThreadLimiter
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setCompactionThreadLimiter
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setAvoidUnnecessaryBlockingIO
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setAvoidUnnecessaryBlockingIO
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    avoidUnnecessaryBlockingIO
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_avoidUnnecessaryBlockingIO
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setPersistStatsToDisk
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setPersistStatsToDisk
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    persistStatsToDisk
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_persistStatsToDisk
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setWriteDbidToManifest
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setWriteDbidToManifest
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    writeDbidToManifest
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_writeDbidToManifest
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setLogReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setLogReadaheadSize
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    logReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_logReadaheadSize
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBestEffortsRecovery
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBestEffortsRecovery
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    bestEffortsRecovery
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_bestEffortsRecovery
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMaxBgErrorResumeCount
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMaxBgErrorResumeCount
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    maxBgerrorResumeCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_maxBgerrorResumeCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBgerrorResumeRetryInterval
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBgerrorResumeRetryInterval
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    bgerrorResumeRetryInterval
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_bgerrorResumeRetryInterval
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEnableBlobFiles
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEnableBlobFiles
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    enableBlobFiles
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_enableBlobFiles
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setMinBlobSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setMinBlobSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    minBlobSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_minBlobSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBlobFileSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBlobFileSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    blobFileSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_blobFileSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBlobCompressionType
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBlobCompressionType
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    blobCompressionType
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_blobCompressionType
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setEnableBlobGarbageCollection
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setEnableBlobGarbageCollection
  (JNIEnv *, jobject, jlong, jboolean);

/*
 * Class:     org_forstdb_Options
 * Method:    enableBlobGarbageCollection
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_org_forstdb_Options_enableBlobGarbageCollection
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBlobGarbageCollectionAgeCutoff
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBlobGarbageCollectionAgeCutoff
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_forstdb_Options
 * Method:    blobGarbageCollectionAgeCutoff
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_forstdb_Options_blobGarbageCollectionAgeCutoff
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBlobGarbageCollectionForceThreshold
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBlobGarbageCollectionForceThreshold
  (JNIEnv *, jobject, jlong, jdouble);

/*
 * Class:     org_forstdb_Options
 * Method:    blobGarbageCollectionForceThreshold
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_org_forstdb_Options_blobGarbageCollectionForceThreshold
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBlobCompactionReadaheadSize
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBlobCompactionReadaheadSize
  (JNIEnv *, jobject, jlong, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    blobCompactionReadaheadSize
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_org_forstdb_Options_blobCompactionReadaheadSize
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setBlobFileStartingLevel
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setBlobFileStartingLevel
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_forstdb_Options
 * Method:    blobFileStartingLevel
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_forstdb_Options_blobFileStartingLevel
  (JNIEnv *, jobject, jlong);

/*
 * Class:     org_forstdb_Options
 * Method:    setPrepopulateBlobCache
 * Signature: (JB)V
 */
JNIEXPORT void JNICALL Java_org_forstdb_Options_setPrepopulateBlobCache
  (JNIEnv *, jobject, jlong, jbyte);

/*
 * Class:     org_forstdb_Options
 * Method:    prepopulateBlobCache
 * Signature: (J)B
 */
JNIEXPORT jbyte JNICALL Java_org_forstdb_Options_prepopulateBlobCache
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
